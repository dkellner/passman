#!/bin/bash

# Copyright 2014 Dominik Kellner

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# If you want passman-config to support a new config item called 'FOO',
# follow these three steps:
#  1. Add 'FOO' to the CONFIG array with an appropriate default value.
#  2. Implement a function 'prompt_for_foo' that changes CONFIG[FOO]
#     based on the user's input.
#  3. Call 'prompt_for_foo' in prompt_for_values.

CONFIG_PATH="$HOME/.passman/config";

# Available config items and their default values.
declare -A CONFIG
CONFIG[PASS_FILE]="$HOME/.passman/passwords.gpg"
CONFIG[GPG_IDENTITY]=""
CONFIG[PASS_LENGTH]="15"
CONFIG[DMENU_OPTIONS]=""

function passman_config
{
    read_values_from_config
    prompt_for_values
    write_values_to_config
}

function read_values_from_config
{
    if [ -f "$CONFIG_PATH" ]; then
        source "$CONFIG_PATH"
        for key in ${!CONFIG[@]}; do
            CONFIG[$key]=${!key}
        done
    fi
}

function prompt_for_values
{
    prompt_for_pass_file
    prompt_for_gpg_identity
    prompt_for_pass_length
    prompt_for_dmenu_options
}

function write_values_to_config
{
    echo -e "# Config file for passman.\n#" \
        "Do not edit this file per hand, use passman-config instead.\n" \
        > "$CONFIG_PATH"
    for key in ${!CONFIG[@]}; do
        echo "$key='${CONFIG[$key]}'" >> "$CONFIG_PATH"
    done
}

function prompt_for_pass_file
{
    echo "PASS_FILE optimally should contain an absolute path, because it is"
    echo "not guaranteed that the script gets called from the same directory."
    read -p "PASS_FILE? [${CONFIG[PASS_FILE]}] " new_pass_file
    if [ ! -z "$new_pass_file" ]; then
        CONFIG[PASS_FILE]=$new_pass_file
    fi
    echo
}

function prompt_for_gpg_identity
{
    echo "GPG_IDENTITY is your personal GPG identity you want to encrypt the"
    echo "password file with. If this variable is set, public-key cryptography"
    echo "will be used. If it is not set, symmetric cryptography will be used"
    echo "instead."
    local gpg_identities=('')
    local gpg_descriptions=("No GPG identity, use symmetric cryptography")
    local list_secret_keys="gpg2 --list-secret-keys --with-colons"
    construct_array_of_output \
        "$list_secret_keys | grep -E '^sec' | cut -d ':' -f 5" \
        gpg_identities
    construct_array_of_output \
        "$list_secret_keys | grep -E '^uid' | cut -d ':' -f 10" \
        gpg_descriptions
    select_from_list "GPG_IDENTITY?" gpg_identities[@] gpg_descriptions[@] \
        CONFIG[GPG_IDENTITY] ${CONFIG[GPG_IDENTITY]}
    echo
}

function prompt_for_pass_length
{
    echo "PASS_LENGTH determines the length of generated passwords."
    read -p "PASS_LENGTH? [${CONFIG[PASS_LENGTH]}] " new_pass_length
    if [ ! -z "$new_pass_length" ]; then
        CONFIG[PASS_LENGTH]=$new_pass_length
    fi
    echo
}

function prompt_for_dmenu_options
{
    echo "DMENU_OPTIONS"
    read -p "DMENU_OPTIONS? [${CONFIG[DMENU_OPTIONS]}] " new_dmenu_options
    if [ ! -z "$new_dmenu_options" ]; then
        CONFIG[DMENU_OPTIONS]=$new_dmenu_options
    fi
    echo
}

function construct_array_of_output
{
    local cmd=$1
    local array=$2
    IFS=$'\n'
    for line in $(eval "$cmd"); do
        eval "${array}+=(\"\$line\")"
    done
}

function select_from_list
{
    local prompt=$1
    local values=("${!2}")
    local descriptions=("${!3}")
    local return_value=$4
    local default_value=$5 # optional
    local default_key=1
    for i in ${!values[@]}; do
        echo "($((i + 1)))" ${values[$i]}
        echo "   " ${descriptions[$i]}
        if [ "${values[$i]}" = "$default_value" ]; then
            default_key=$((i + 1))
        fi
    done
    read -p "$prompt [$default_key] " selection
    map_selection_to_value values[@] $default_key $return_value $selection
}

function map_selection_to_value
{
    local values=("${!1}")
    local default_key=$2
    local return_value=$3
    local selection=$4 # optional
    if [ -z "$selection" ]; then
        eval "$return_value=\${values[\$default_key]}"
    else
        selection=$((selection - 1))
    fi
    if [ -z "${values[$selection]}" ]; then
        eval "$return_value=\$default_value"
    else
        eval "$return_value=\${values[\$selection]}"
    fi
}

# Parse command line arguments
while getopts c: opt; do
    case $opt in
        c)
            CONFIG_PATH=$OPTARG
            ;;
    esac
done

passman_config
