#!/bin/bash

# Copyright 2014 Markus Lux

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Helper function to read the entire passfile.
#
# The passfile content is echoed to stdout.
function read_passfile
{
    if [ -s "$PASS_FILE" ]; then
        gpg2 --no-tty --quiet -d "$PASS_FILE"
    else
        echo -n ''
    fi
}

# Helper function to write the entire passfile.
#
# The passfile content to write must be piped to this function, e.g.
# echo -e "foo\nbar" | write_passfile
function write_passfile
{
    if [ -z "$GPG_IDENTITY" ]; then
        gpg2 --symmetric --cipher-algo AES256 --yes --output "$PASS_FILE"
    else
        gpg2 --encrypt --recipient "$GPG_IDENTITY" --yes --output "$PASS_FILE"
    fi
}

# Helper function to display the dmenu.
function dmenu_select
{
    local default_options='-i -nb #333 -nf white -sb #0a0 -sf white'
    eval 'dmenu $default_options $DMENU_OPTIONS -p "Select:"'
}

# Returns all keys present in the password file.
function getkeys
{
    read_passfile | cut -f 1 | sort
}

# Returns all keys and additionally auto-type hints if present
function getkeyshints
{
    read_passfile | cut -f 1,4 | sort
}

# Gets a login as a string "user<TAB>pass".
# First argument: entry key
function get
{
    local key="$1"
    if [[ -n "$key" ]]; then
        if [[ -z "$ONLY_PW" ]]; then
            read_passfile | grep -P "^$key\t" | cut -f 2,3
        else
            read_passfile | grep -P "^$key\t" | cut -f 3
        fi
    fi
}

# Gets the hint for a login.
# First argument: entry key
function gethint
{
    local key="$1"
    if [[ -n "$key" ]]; then
        read_passfile | grep -P "^$key\t" | cut -f 4
    fi
}

# Adds an entry to the password file.
function add
{

	IFS= read -r -p "Identifier: " site
	local site=$(echo "$site" | sed -e 's/^ *//g' -e 's/ *$//g') # remove leading/trailing whitespaces
	if [[ -z "$site" ]]; then
		echo "Please specify a site identifier."
		exit 1
	fi

	IFS= read -p "Username (optional): " user
	IFS= read -r -s -p "Password (will not be echoed): " pass
	echo

	echo -e "$site$user$pass" | grep -P '\t' > /dev/null
	if [[ $? -eq 0 ]]; then
		echo "All values must NOT contain any <TAB> characters."
		exit 1
	fi

    if [[ -z "$pass" ]]; then
        local pass=$(pwgen -s1 "$PASS_LENGTH")
        echo "Generated password for $user: $pass"
    fi

    local line="$site\\t$user\\t$pass"

    local passes=$(read_passfile)

    if [[ $? -eq 0 ]]; then
        if [ -n "$passes" ]; then
            passes+='\n'
        fi
        passes+="$line"
        echo -e "$passes" | write_passfile
    fi
}

# Deletes an entry from the password file
# First argument: entry key
function del
{
    local key="$1"
    if [[ -n "$key" ]]; then
        local passes=$(read_passfile | sed "/^$key	/d")

        if [[ $? -eq 0 ]]; then
            echo -e "$passes" | write_passfile
        fi
    fi
}

# Set auto type hint for specific entry
# First argument: entry key
# Second argument: hint to set
function sethint
{
    local key="$1"
    local hint="$2"
    if [[ -n "$key" ]]; then
        local login=$(get "$key")

        if [[ -z "$login" ]]; then
            echo "Key '$key' not found."
            return
        fi

        if [[ -z "$hint" ]]; then
            echo "No regex specified."
            return
        fi

        local user=${login%	*}
        local password=${login#*	}

        local regex=$(echo "$hint" | tr -d '\t')
        local line="$key\\t$user\\t$password\\t$regex"

        local passes=$(read_passfile | sed "/^$key	/d")

        if [[ $? -eq 0 ]]; then
            passes+='\n'
            passes+="$line"
            echo -e "$passes" | write_passfile
        fi
    fi
}

# Types the credentials as user<TAB>password<enter>.
# First argument : user
# Second argument: password
function autotype
{
    local user="$1"
    local password="$2"
    if [[ -n "$user" ]] && [[ -z "$ONLY_PW" ]]; then
        xdotool type --delay 50 -- "$user"
        xdotool key Tab
    fi
    xdotool type --delay 50 -- "$password"
    xdotool key Return
}

# Fills credentials by selecting the desired site with dmenu in a (e.g. browser) form
# First argument : site to submit (optional)
# If first argument is empty, dmenu will pop up
function submitform
{
    local key
    if [[ -n "$1" ]]; then
        key="$1"
    else
        keys=$(getkeys)
        key=$(echo "$keys" | dmenu_select)
    fi

    local login=$(get "$key")

    if [[ -z "$login" ]]; then
        return
    fi

    local user=${login%	*}
    local password=${login#*	}

    autotype "$user" "$password"
}

# Try to match site key against current window name
# If one key matches, the credentials will auto-type automatically
# If more than one key matches, dmenu pops up to choose between them
# If no key matches, standard dmenu will pop up
function autosubmitform
{
    local windowname=$(xdotool getwindowfocus getwindowname)

    local keyshints=$(getkeyshints)

    local matches=()
    OLDIFS="$IFS"; IFS=$'\n'
    for keyhint in $keyshints; do
        local key=${keyhint%	*}
        local hint=${keyhint#*	}

        if [[ -z "$hint" ]]; then
            hint="$key"
        fi

        echo "$windowname" | grep -Ei "$hint" > /dev/null
        if [[ $? -eq 0 ]]; then
            matches+=( "$key" )
        fi
    done
    IFS="$OLDIFS"

    local numMatches=${#matches[@]};

    case $numMatches in
        0)
            submitform
            ;;
        1)
            submitform "${matches[0]}"
            ;;
        *)
            # trick the IFS to output array items as separate lines for dmenu
            local OLDIFS="$IFS"; IFS=$'\n'
            local key=$(echo "${matches[*]}" | dmenu_select)
            IFS="$OLDIFS"
            if [[ -z "$key" ]]; then
                return;
            fi
            submitform "$key"
            ;;
    esac
}

# Call "passman onlypw <action> <params>" as you would call passman normally with "passman <action> <params>"
# This will only type the password without username.
function onlypw
{
    export ONLY_PW=1
    eval "$@"
}

# Parse command line arguments.
while getopts c: opt; do
    case $opt in
        c)
            export CONFIG_PATH=$OPTARG
            ;;
    esac
done
shift `expr $OPTIND - 1`

# Read and verify config.
if [ -z "$CONFIG_PATH" ]; then
    CONFIG_PATH="$HOME/.passman/config"
fi
if [[ -f "$CONFIG_PATH" ]]; then
    . "$CONFIG_PATH"
else
    echo -n "In order to use passman, you need to set configuration options in "
    echo "the file $CONFIG_PATH"
    exit 1
fi
if [[ -z "$PASS_LENGTH" ]]; then
    PASS_LENGTH='15'
fi
if [[ -z "$DMENU_OPTIONS" ]]; then
    DMENU_OPTIONS=''
fi

# This has to be done to allow empty parameters (e.g. for user-less logins).
params=''
for i in "$@"
do
params="$params '$i'"
done

# The script parameters determine which method gets called.
eval "$params"
